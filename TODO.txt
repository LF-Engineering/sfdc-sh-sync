So for the SFDC-SH sync, for daily sync from SH->SFDC we will have the following table that will hold all UUIDs modified since last daily sync (usually about 24 hours ago, initially this table will just have all UUIDs): https://github.com/LF-Engineering/sfdc-sh-sync/blob/master/sql/sh_uuids_for_sf_sync_table.sql (that table has last_modified column to deal with races as we discussed @Fayaz), then all we need to do is to install insert/update/delete triggers on the SH database that will just add UUIDs marked “for sync” for the next daily sync, example triggers just for uidentities table are here and they work (just tested them): https://github.com/LF-Engineering/sfdc-sh-sync/blob/master/sql/sh_triggers.sql(as you can see they add UUID to sync table no matter if it was added/deleted or modified and operations datetime in `last_modified` column - they also deal with on duplicate key conflict automatically). The final daily sync will have a list of UUIDs to process. It will check them one-by-one - compare our state with the SFDC state, and if any change is detected it will update SFDC. The opposite direction will be SFDC putting event in AWS SNS queue/channel and my handler will listen to that queue/channel and pull updates from it. Both updates from SFDC and updates to SFDC will run on per-UUID mutex to avoid conflict with processing the same profile data in both directions at the same time, once they’re ensured not running the same UUID at the same time - UUID with newer last_modified wins (assuming that I will have last modified date from the SFDC). Anyway - all I’ll implement for now will be full triggers covering all profiles/enrollments/identities tables in SH, so any change to profile and it sub-object will be recorded in uuids_for_sf_sync table. (edited) 

I expect some struggle to detect how to map SFDC profile data to our profile data - how to detect an exact profile which matches between SH and SFDC.
